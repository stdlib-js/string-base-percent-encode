{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport utf16ToUTF8Array from '@stdlib/string-utf16-to-utf8-array';\n\n\n// VARIABLES //\n\n// Character codes:\nvar UNDERSCORE = 95|0;\nvar PERIOD = 46|0;\nvar HYPHEN = 45|0;\nvar TILDE = 126|0;\nvar ZERO = 48|0;\nvar NINE = 57|0;\nvar A = 65|0;\nvar Z = 90|0;\nvar a = 97|0;\nvar z = 122|0;\n\n\n// MAIN //\n\n/**\n* Percent-encodes a UTF-16 encoded string according to [RFC 3986][1].\n*\n* [1]: https://tools.ietf.org/html/rfc3986#section-2.1\n*\n* @param {string} str - string to percent-encode\n* @returns {string} percent-encoded string\n*\n* @example\n* var str1 = 'Ladies + Gentlemen';\n*\n* var str2 = percentEncode( str1 );\n* // returns 'Ladies%20%2B%20Gentlemen'\n*/\nfunction percentEncode( str ) {\n\tvar byte;\n\tvar out;\n\tvar len;\n\tvar buf;\n\tvar i;\n\n\t// Convert to an array of octets using UTF-8 encoding (see https://tools.ietf.org/html/rfc3986#section-2.5):\n\tbuf = utf16ToUTF8Array( str );\n\n\t// Encode the string...\n\tlen = buf.length;\n\tout = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tbyte = buf[ i ];\n\t\tif (\n\t\t\t// ASCII Digits:\n\t\t\t( byte >= ZERO && byte <= NINE ) ||\n\n\t\t\t// ASCII uppercase letters:\n\t\t\t( byte >= A && byte <= Z ) ||\n\n\t\t\t// ASCII lowercase letters:\n\t\t\t( byte >= a && byte <= z ) ||\n\n\t\t\t// ASCII unreserved characters (see https://tools.ietf.org/html/rfc3986#section-2.3):\n\t\t\tbyte === HYPHEN ||\n\t\t\tbyte === PERIOD ||\n\t\t\tbyte === UNDERSCORE ||\n\t\t\tbyte === TILDE\n\t\t) {\n\t\t\tout += str.charAt( i );\n\t\t} else {\n\t\t\t// Convert an octet to hexadecimal and uppercase according to the RFC (see https://tools.ietf.org/html/rfc3986#section-2.1):\n\t\t\tout += '%' + byte.toString( 16 ).toUpperCase();\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default percentEncode;\n"],"names":["percentEncode","str","byte","out","len","buf","i","utf16ToUTF8Array","length","charAt","toString","toUpperCase"],"mappings":";;8FAwDA,SAASA,EAAeC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAQJ,IAFAF,GAHAC,EAAME,EAAkBN,IAGdO,OACVL,EAAM,GACAG,EAAI,EAAGA,EAAIF,EAAKE,IAkBpBH,IAjBDD,EAAOG,EAAKC,KAtCH,IAyCUJ,GAxCV,IA2CNA,GA1CG,IA0CUA,GAzCV,IA4CHA,GA3CG,IA2CUA,GA1CV,KAPK,KAoDVA,GArDU,KAsDVA,GAvDc,KAwDdA,GArDS,MAsDTA,EAEOD,EAAIQ,OAAQH,GAGZ,IAAMJ,EAAKQ,SAAU,IAAKC,cAGnC,OAAOR,CACR"}